#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Fish Reports System —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
current_dir = Path(__file__).parent
src_dir = current_dir / "src"
sys.path.insert(0, str(src_dir))

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    try:
        from fish_reports.core.workflow import FishReportsWorkflow

        print("üêü –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fish Reports System —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        print("=" * 60)

        # –°–æ–∑–¥–∞–µ–º workflow
        workflow = FishReportsWorkflow()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏ –∫ –ø—Ä–∏–º–µ—Ä–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        source_file = current_dir / "sample_data" / "sample_source_data.xlsx"
        intermediate_dir = current_dir / "sample_data" / "filtered"
        reports_dir = current_dir / "sample_data" / "reports"
        output_dir = current_dir / "sample_data" / "output"

        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {source_file}")
        print(f"üìÅ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã: {intermediate_dir}")
        print(f"üìÅ –û—Ç—á–µ—Ç—ã: {reports_dir}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_dir}")
        print()

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for dir_path in [intermediate_dir, reports_dir, output_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏
        if not workflow.set_paths(source_file, intermediate_dir, reports_dir, output_dir):
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π")
            sys.exit(1)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        if workflow.process_files():
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            results = workflow.get_results()
            if results:
                print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                print(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {results.get('total_rows', 0)}")
                print(f"‚Ä¢ –û–±—â–∏–π –≤–µ—Å (–∫–≥): {results.get('total_weight_kg', 0):.2f}")
                print(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫: {results.get('total_packages', 0)}")
                print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü–µ–Ω–∑–∏–π: {results.get('unique_licenses', 0)}")
                print(f"‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤: {results.get('total_files', 0)}")

                if results.get('total_files', 0) > 0:
                    print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:")
                    for license, files in results.get('files_by_license', {}).items():
                        print(f"  ‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏—è {license}: {len(files)} —Ñ–∞–π–ª(–æ–≤)")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤")
            sys.exit(1)

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print("   pip install -r requirements.txt")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
